name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from tag
      id: get_version
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        if [ $(git tag --list | wc -l) -gt 1 ]; then
          PREV_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREV_TAG}..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Release ${{ steps.get_version.outputs.tag_name }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.tag_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Binary Installation
          Download the appropriate binary for your platform from the assets below.
          
          ### Go Install
          ```bash
          go install github.com/traceloop-ai/traceloop/cmd/traceloop@${{ steps.get_version.outputs.tag_name }}
          ```
          
          ### Python SDK
          ```bash
          pip install traceloop==${{ steps.get_version.outputs.version }}
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/traceloop-ai/traceloop:${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  # Build and upload binaries
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        COMMIT=$(git rev-parse HEAD)
        BINARY_NAME=traceloop-${{ matrix.goos }}-${{ matrix.goarch }}
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=${BINARY_NAME}.exe
        fi
        
        go build \
          -ldflags "-s -w -X main.version=${VERSION} -X main.commit=${COMMIT}" \
          -o ${BINARY_NAME} \
          ./cmd/traceloop
          
        # Create checksum
        sha256sum ${BINARY_NAME} > ${BINARY_NAME}.sha256
        
    - name: Upload binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./traceloop-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_name: traceloop-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_content_type: application/octet-stream
        
    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./traceloop-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.sha256
        asset_name: traceloop-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.sha256
        asset_content_type: text/plain

  # Build and push Docker image
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/traceloop-ai/traceloop:latest
          ghcr.io/traceloop-ai/traceloop:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=traceloop
          org.opencontainers.image.description=Production observability for AI agents
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=https://github.com/traceloop-ai/traceloop
          org.opencontainers.image.revision=${{ github.sha }}

  # Publish Python package
  publish-python:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Update version in setup.py
      working-directory: sdk/python
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        sed -i "s/version=\"0.1.0\"/version=\"${VERSION}\"/" setup.py
        
    - name: Build package
      working-directory: sdk/python
      run: python -m build
      
    - name: Check package
      working-directory: sdk/python
      run: twine check dist/*
      
    - name: Publish to PyPI
      working-directory: sdk/python
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  # Update Homebrew formula (for future use)
  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    if: false  # Disable for now, enable when homebrew tap is ready
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v2
      with:
        formula-name: traceloop
        homebrew-tap: traceloop-ai/homebrew-tap
        base-branch: main
        download-url: https://github.com/traceloop-ai/traceloop/releases/download/${{ needs.create-release.outputs.tag_name }}/traceloop-darwin-amd64
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
